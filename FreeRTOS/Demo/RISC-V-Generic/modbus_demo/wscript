#~
# Copyright (c) 2020 Hesham Almatary and Michael Dodson
#
# This software was developed by SRI International and the University of
# Cambridge Computer Laboratory (Department of Computer Science and
# Technology) under DARPA contract HR0011-18-C-0016 ("ECATS"), as part of the
# DARPA SSITH research programme.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#


def configure(ctx):
    print("Configuring modbus demo @", ctx.path.abspath())

    ctx.env.append_value('INCLUDES', [
        ctx.path.abspath(),
        ctx.path.abspath() + '/include',
    ])

    ctx.env.append_value('DEFINES', [
        'configPROG_ENTRY                   = main_modbus',
        'configCUSTOM_HEAP_SIZE             = 8'
    ])

    ctx.recurse('modcap')

    ctx.env.append_value('LIB_DEPS', ['freertos_tcpip', 'virtio'])

def build(bld):
    print("Building modbus demo")

    bld.recurse('modcap')

    bld.stlib(features=['c'],
            source=[
                'main_modbus.c',
                'modbus_server.c',
                'modbus_client.c'
            ],
            use=[
                "freertos_core",
                "freertos_bsp",
                "freertos_tcpip",
                "modbus"
            ],
            target="modbus_demo")

    bld.stlib(features=['c'],
            source=[
                'main_modbus.c',
                'modbus_server.c',
                'modbus_client.c',
                'microbenchmark.c'
            ],
            use=[
                "freertos_core",
                "freertos_bsp",
                "freertos_tcpip",
                "modbus"
            ],
            defines=bld.env.DEFINES + ['NDEBUG=1', 'MICROBENCHMARK=1'],
            target="modbus_demo_bench")

    if bld.env.PURECAP:
        bld.stlib(features=['c'],
                source=[
                    'main_modbus.c',
                    'modbus_server.c',
                    'modbus_client.c'
                ],
                use=[
                    "freertos_core",
                    "freertos_bsp",
                    "modbus",
                    "modbus_object_caps"
                ],
                defines=bld.env.DEFINES + ['MODBUS_OBJECT_CAPS=1'],
                target="modbus_demo_object_caps")

        bld.stlib(features=['c'],
                source=[
                    'main_modbus.c',
                    'modbus_server.c',
                    'modbus_client.c'
                ],
                use=[
                    "freertos_core",
                    "freertos_bsp",
                    "modbus",
                    "modbus_object_caps"
                ],
                defines=bld.env.DEFINES + ['MODBUS_OBJECT_CAPS_STUB=1'],
                target="modbus_demo_object_caps_stub")

        bld.stlib(features=['c'],
                source=[
                    'main_modbus.c',
                    'modbus_server.c',
                    'modbus_client.c',
                    'microbenchmark.c'
                ],
                use=[
                    "freertos_core",
                    "freertos_bsp",
                    "modbus",
                    "modbus_object_caps"
                ],
                defines=bld.env.DEFINES + [
                    'NDEBUG=1',
                    'MODBUS_OBJECT_CAPS=1',
                    'MICROBENCHMARK=1'
                ],
                target="modbus_demo_object_caps_bench")

        bld.stlib(features=['c'],
                source=[
                    'main_modbus.c',
                    'modbus_server.c',
                    'modbus_client.c',
                    'microbenchmark.c'
                ],
                use=[
                    "freertos_core",
                    "freertos_bsp",
                    "modbus",
                    "modbus_object_caps"
                ],
                defines=bld.env.DEFINES + [
                    'NDEBUG=1',
                    'MODBUS_OBJECT_CAPS_STUB=1',
                    'MICROBENCHMARK=1'
                ],
                target="modbus_demo_object_caps_stub_bench")

    bld.stlib(features=['c'],
            source=[
                'main_modbus.c',
                'modbus_server.c',
                'modbus_client.c'
            ],
            use=[
                "freertos_core",
                "freertos_bsp",
                "modbus",
                "modbus_network_caps",
                "macaroons"
            ],
            defines=bld.env.DEFINES + ['MODBUS_NETWORK_CAPS=1'],
            target="modbus_demo_network_caps")

    bld.stlib(features=['c'],
            source=[
                'main_modbus.c',
                'modbus_server.c',
                'modbus_client.c',
                'microbenchmark.c'
            ],
            use=[
                "freertos_core",
                "freertos_bsp",
                "modbus",
                "modbus_network_caps",
                "macaroons"
            ],
            defines=bld.env.DEFINES + [
                'MODBUS_NETWORK_CAPS=1',
                'MICROBENCHMARK=1',
                'NDEBUG=1'
            ],
            target="modbus_demo_networ_caps_bench")

    if bld.env.PURECAP:
        bld.stlib(features=['c'],
                source=[
                    'main_modbus.c',
                    'modbus_server.c',
                    'modbus_client.c'
                ],
                use=[
                    "freertos_core",
                    "freertos_bsp",
                    "freertos_tcpip",
                    "modbus",
                    "modbus_network_caps",
                    "macaroons",
                    "modbus_object_caps"
                ],
                defines=bld.env.DEFINES + ['MODBUS_NETWORK_CAPS=1', 'MODBUS_OBJECT_CAPS=1'],
                target="modbus_demo_object_and_network_caps")

        bld.stlib(features=['c'],
                source=[
                    'main_modbus.c',
                    'modbus_server.c',
                    'modbus_client.c',
                    'microbenchmark.c'
                ],
                use=[
                    "freertos_core",
                    "freertos_bsp",
                    "freertos_tcpip",
                    "modbus",
                    "modbus_network_caps",
                    "macaroons",
                    "modbus_object_caps"
                ],
                defines=bld.env.DEFINES + [
                    'MODBUS_NETWORK_CAPS=1',
                    'MODBUS_OBJECT_CAPS=1',
                    'MICROBENCHMARK=1',
                    'NDEBUG=1'
                ],
                target="modbus_demo_object_and_network_caps_bench")
